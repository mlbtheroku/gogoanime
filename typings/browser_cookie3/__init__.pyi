"""
This type stub file was generated by pyright.
"""

from http.cookiejar import CookieJar
from typing import Any

class BrowserCookieError(Exception): ...

class ChromiumBased:
    """Super class for all Chromium based browsers"""

    UNIX_TO_NT_EPOCH_OFFSET: int

    def __init__(
        self,
        browser: str,
        cookie_file: str | None = ...,
        domain_name: str | None = ...,
        key_file: str | None = ...,
        **kwargs: Any
    ) -> None: ...
    def __del__(self) -> None: ...
    def __str__(self) -> str: ...
    def load(self) -> CookieJar:
        """Load sqlite cookies into a cookiejar"""
        ...

class Chrome(ChromiumBased):
    """Class for Google Chrome"""

    def __init__(
        self,
        cookie_file: str | None = ...,
        domain_name: str | None = ...,
        key_file: str | None = ...,
    ) -> None: ...

class Chromium(ChromiumBased):
    """Class for Chromium"""

    def __init__(
        self,
        cookie_file: str | None = ...,
        domain_name: str | None = ...,
        key_file: str | None = ...,
    ) -> None: ...

class Opera(ChromiumBased):
    """Class for Opera"""

    def __init__(
        self,
        cookie_file: str | None = ...,
        domain_name: str | None = ...,
        key_file: str | None = ...,
    ) -> None: ...

class Brave(ChromiumBased):
    def __init__(
        self,
        cookie_file: str | None = ...,
        domain_name: str | None = ...,
        key_file: str | None = ...,
    ) -> None: ...

class Edge(ChromiumBased):
    """Class for Microsoft Edge"""

    def __init__(
        self,
        cookie_file: str | None = ...,
        domain_name: str | None = ...,
        key_file: str | None = ...,
    ) -> None: ...

class Vivaldi(ChromiumBased):
    """Class for Vivaldi Browser"""

    def __init__(
        self,
        cookie_file: str | None = ...,
        domain_name: str | None = ...,
        key_file: str | None = ...,
    ) -> None: ...

class Firefox:
    """Class for Firefox"""

    def __init__(
        self, cookie_file: str | None = ..., domain_name: str | None = ...
    ) -> None: ...
    def __del__(self) -> None: ...
    def __str__(self) -> str: ...
    @staticmethod
    def get_default_profile(user_data_path: str) -> str | Any | None: ...
    @staticmethod
    def find_cookie_file() -> str: ...
    def load(self) -> CookieJar: ...

class Safari:
    """Class for Safari"""

    APPLE_TO_UNIX_TIME: int
    NEW_ISSUE_MESSAGE: str
    safari_cookies: str

    def __init__(
        self, cookie_file: str | None = ..., domain_name: str | None = ...
    ) -> None: ...
    def __del__(self) -> None: ...
    def load(self) -> CookieJar: ...

def chrome(
    cookie_file: str | None = ...,
    domain_name: str | None = ...,
    key_file: str | None = ...,
) -> CookieJar:
    """Returns a cookiejar of the cookies used by Chrome. Optionally pass in a
    domain name to only load cookies from the specified domain
    """
    ...

def chromium(
    cookie_file: str | None = ...,
    domain_name: str | None = ...,
    key_file: str | None = ...,
) -> CookieJar:
    """Returns a cookiejar of the cookies used by Chromium. Optionally pass in a
    domain name to only load cookies from the specified domain
    """
    ...

def opera(
    cookie_file: str | None = ...,
    domain_name: str | None = ...,
    key_file: str | None = ...,
) -> CookieJar:
    """Returns a cookiejar of the cookies used by Opera. Optionally pass in a
    domain name to only load cookies from the specified domain
    """
    ...

def brave(
    cookie_file: str | None = ...,
    domain_name: str | None = ...,
    key_file: str | None = ...,
) -> CookieJar:
    """Returns a cookiejar of the cookies and sessions used by Brave. Optionally
    pass in a domain name to only load cookies from the specified domain
    """
    ...

def edge(
    cookie_file: str | None = ...,
    domain_name: str | None = ...,
    key_file: str | None = ...,
) -> CookieJar:
    """Returns a cookiejar of the cookies used by Microsoft Egde. Optionally pass in a
    domain name to only load cookies from the specified domain
    """
    ...

def vivaldi(
    cookie_file: str | None | None = ...,
    domain_name: str | None = ...,
    key_file: str | None = ...,
) -> CookieJar:
    """Returns a cookiejar of the cookies used by Vivaldi Browser. Optionally pass in a
    domain name to only load cookies from the specified domain
    """
    ...

def firefox(cookie_file: str | None = ..., domain_name: str | None = ...) -> CookieJar:
    """Returns a cookiejar of the cookies and sessions used by Firefox. Optionally
    pass in a domain name to only load cookies from the specified domain
    """
    ...

def safari(cookie_file: str | None = ..., domain_name: str | None = ...) -> CookieJar:
    """Returns a cookiejar of the cookies and sessions used by Safari. Optionally
    pass in a domain name to only load cookies from the specified domain
    """
    ...

def load(domain_name: str | None = ...) -> CookieJar:
    """Try to load cookies from all supported browsers and return combined cookiejar
    Optionally pass in a domain name to only load cookies from the specified domain
    """
    ...

if __name__ == "__main__": ...
